// Code generated by the Encore 1.50.0 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly affiliate: affiliate.ServiceClient
    public readonly ai: ai.ServiceClient
    public readonly analytics: analytics.ServiceClient
    public readonly automation: automation.ServiceClient
    public readonly content: content.ServiceClient
    public readonly newsletter: newsletter.ServiceClient
    public readonly seo: seo.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.affiliate = new affiliate.ServiceClient(base)
        this.ai = new ai.ServiceClient(base)
        this.analytics = new analytics.ServiceClient(base)
        this.automation = new automation.ServiceClient(base)
        this.content = new content.ServiceClient(base)
        this.newsletter = new newsletter.ServiceClient(base)
        this.seo = new seo.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createAffiliateLink as api_affiliate_create_affiliate_link_createAffiliateLink } from "~backend/affiliate/create_affiliate_link";
import { createProduct as api_affiliate_create_product_createProduct } from "~backend/affiliate/create_product";
import { createProgram as api_affiliate_create_program_createProgram } from "~backend/affiliate/create_program";
import { deleteProduct as api_affiliate_delete_product_deleteProduct } from "~backend/affiliate/delete_product";
import { getAffiliateStats as api_affiliate_get_affiliate_stats_getAffiliateStats } from "~backend/affiliate/get_affiliate_stats";
import { getProduct as api_affiliate_get_product_getProduct } from "~backend/affiliate/get_product";
import { listAffiliateProducts as api_affiliate_list_affiliate_products_listAffiliateProducts } from "~backend/affiliate/list_affiliate_products";
import { listPrograms as api_affiliate_list_programs_listPrograms } from "~backend/affiliate/list_programs";
import { handleRedirect as api_affiliate_redirect_handler_handleRedirect } from "~backend/affiliate/redirect_handler";
import { updateProduct as api_affiliate_update_product_updateProduct } from "~backend/affiliate/update_product";

export namespace affiliate {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createAffiliateLink = this.createAffiliateLink.bind(this)
            this.createProduct = this.createProduct.bind(this)
            this.createProgram = this.createProgram.bind(this)
            this.deleteProduct = this.deleteProduct.bind(this)
            this.getAffiliateStats = this.getAffiliateStats.bind(this)
            this.getProduct = this.getProduct.bind(this)
            this.handleRedirect = this.handleRedirect.bind(this)
            this.listAffiliateProducts = this.listAffiliateProducts.bind(this)
            this.listPrograms = this.listPrograms.bind(this)
            this.updateProduct = this.updateProduct.bind(this)
        }

        /**
         * Creates a new affiliate tracking link.
         */
        public async createAffiliateLink(params: RequestType<typeof api_affiliate_create_affiliate_link_createAffiliateLink>): Promise<ResponseType<typeof api_affiliate_create_affiliate_link_createAffiliateLink>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/links`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_create_affiliate_link_createAffiliateLink>
        }

        /**
         * Creates a new affiliate product.
         */
        public async createProduct(params: RequestType<typeof api_affiliate_create_product_createProduct>): Promise<ResponseType<typeof api_affiliate_create_product_createProduct>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/products`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_create_product_createProduct>
        }

        /**
         * Creates a new affiliate program.
         */
        public async createProgram(params: RequestType<typeof api_affiliate_create_program_createProgram>): Promise<ResponseType<typeof api_affiliate_create_program_createProgram>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/programs`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_create_program_createProgram>
        }

        /**
         * Deletes an affiliate product.
         */
        public async deleteProduct(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/affiliate/products/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves comprehensive affiliate marketing statistics.
         */
        public async getAffiliateStats(): Promise<ResponseType<typeof api_affiliate_get_affiliate_stats_getAffiliateStats>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/stats`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_get_affiliate_stats_getAffiliateStats>
        }

        /**
         * Retrieves a single affiliate product by its slug.
         */
        public async getProduct(params: { slug: string }): Promise<ResponseType<typeof api_affiliate_get_product_getProduct>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/products/by-slug/${encodeURIComponent(params.slug)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_get_product_getProduct>
        }

        /**
         * Handles affiliate link redirects with tracking (matches /r/:id pattern from original architecture).
         */
        public async handleRedirect(params: RequestType<typeof api_affiliate_redirect_handler_handleRedirect>): Promise<ResponseType<typeof api_affiliate_redirect_handler_handleRedirect>> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                referer:           params.referrer,
                "user-agent":      params.userAgent,
                "x-forwarded-for": params.xForwardedFor,
            })

            const query = makeRecord<string, string | string[]>({
                contentId: params.contentId,
                sessionId: params.sessionId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/r/${encodeURIComponent(params.shortCode)}`, {headers, query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_redirect_handler_handleRedirect>
        }

        /**
         * Retrieves affiliate products with optional filtering.
         */
        public async listAffiliateProducts(params: RequestType<typeof api_affiliate_list_affiliate_products_listAffiliateProducts>): Promise<ResponseType<typeof api_affiliate_list_affiliate_products_listAffiliateProducts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category:  params.category,
                limit:     params.limit === undefined ? undefined : String(params.limit),
                offset:    params.offset === undefined ? undefined : String(params.offset),
                programId: params.programId === undefined ? undefined : String(params.programId),
                search:    params.search,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/products`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_list_affiliate_products_listAffiliateProducts>
        }

        /**
         * Retrieves all affiliate programs.
         */
        public async listPrograms(): Promise<ResponseType<typeof api_affiliate_list_programs_listPrograms>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/programs`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_list_programs_listPrograms>
        }

        /**
         * Updates an existing affiliate product.
         */
        public async updateProduct(params: RequestType<typeof api_affiliate_update_product_updateProduct>): Promise<ResponseType<typeof api_affiliate_update_product_updateProduct>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                category:    params.category,
                description: params.description,
                imageUrl:    params.imageUrl,
                isActive:    params.isActive,
                name:        params.name,
                originalUrl: params.originalUrl,
                price:       params.price,
                programId:   params.programId,
                slug:        params.slug,
                tags:        params.tags,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/affiliate/products/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_affiliate_update_product_updateProduct>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { chatAssistant as api_ai_chat_assistant_chatAssistant } from "~backend/ai/chat_assistant";
import { getProductRecommendations as api_ai_product_recommendations_getProductRecommendations } from "~backend/ai/product_recommendations";

export namespace ai {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.chatAssistant = this.chatAssistant.bind(this)
            this.getProductRecommendations = this.getProductRecommendations.bind(this)
        }

        /**
         * AI-powered health and wellness chat assistant.
         */
        public async chatAssistant(params: RequestType<typeof api_ai_chat_assistant_chatAssistant>): Promise<ResponseType<typeof api_ai_chat_assistant_chatAssistant>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/chat`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_chat_assistant_chatAssistant>
        }

        /**
         * AI-powered product recommendations based on user input and preferences.
         */
        public async getProductRecommendations(params: RequestType<typeof api_ai_product_recommendations_getProductRecommendations>): Promise<ResponseType<typeof api_ai_product_recommendations_getProductRecommendations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/recommendations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_product_recommendations_getProductRecommendations>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getActionableInsights as api_analytics_get_actionable_insights_getActionableInsights } from "~backend/analytics/get_actionable_insights";
import { getAnalyticsSummary as api_analytics_get_analytics_summary_getAnalyticsSummary } from "~backend/analytics/get_analytics_summary";
import { getPerformanceTrends as api_analytics_get_performance_trends_getPerformanceTrends } from "~backend/analytics/get_performance_trends";
import { getRealTimeMetrics as api_analytics_get_real_time_metrics_getRealTimeMetrics } from "~backend/analytics/get_real_time_metrics";
import { getUnifiedDashboard as api_analytics_get_unified_dashboard_getUnifiedDashboard } from "~backend/analytics/get_unified_dashboard";
import { trackPageView as api_analytics_track_page_view_trackPageView } from "~backend/analytics/track_page_view";
import { trackSearch as api_analytics_track_search_trackSearch } from "~backend/analytics/track_search";

export namespace analytics {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getActionableInsights = this.getActionableInsights.bind(this)
            this.getAnalyticsSummary = this.getAnalyticsSummary.bind(this)
            this.getPerformanceTrends = this.getPerformanceTrends.bind(this)
            this.getRealTimeMetrics = this.getRealTimeMetrics.bind(this)
            this.getUnifiedDashboard = this.getUnifiedDashboard.bind(this)
            this.trackPageView = this.trackPageView.bind(this)
            this.trackSearch = this.trackSearch.bind(this)
        }

        public async getActionableInsights(): Promise<ResponseType<typeof api_analytics_get_actionable_insights_getActionableInsights>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/insights`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_get_actionable_insights_getActionableInsights>
        }

        /**
         * Retrieves analytics summary data for the admin dashboard.
         */
        public async getAnalyticsSummary(): Promise<ResponseType<typeof api_analytics_get_analytics_summary_getAnalyticsSummary>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/summary`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_get_analytics_summary_getAnalyticsSummary>
        }

        public async getPerformanceTrends(params: RequestType<typeof api_analytics_get_performance_trends_getPerformanceTrends>): Promise<ResponseType<typeof api_analytics_get_performance_trends_getPerformanceTrends>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                days: params.days === undefined ? undefined : String(params.days),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/trends`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_get_performance_trends_getPerformanceTrends>
        }

        public async getRealTimeMetrics(): Promise<ResponseType<typeof api_analytics_get_real_time_metrics_getRealTimeMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/real-time`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_get_real_time_metrics_getRealTimeMetrics>
        }

        public async getUnifiedDashboard(): Promise<ResponseType<typeof api_analytics_get_unified_dashboard_getUnifiedDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/analytics/unified-dashboard`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_analytics_get_unified_dashboard_getUnifiedDashboard>
        }

        /**
         * Tracks a page view for analytics purposes.
         */
        public async trackPageView(params: RequestType<typeof api_analytics_track_page_view_trackPageView>): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "user-agent":      params.userAgent,
                "x-forwarded-for": params.xForwardedFor,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                articleId: params.articleId,
                pagePath:  params.pagePath,
                referrer:  params.referrer,
                sessionId: params.sessionId,
            }

            await this.baseClient.callTypedAPI(`/analytics/page-view`, {headers, method: "POST", body: JSON.stringify(body)})
        }

        /**
         * Tracks a search query for analytics purposes.
         */
        public async trackSearch(params: RequestType<typeof api_analytics_track_search_trackSearch>): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "user-agent":      params.userAgent,
                "x-forwarded-for": params.xForwardedFor,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                query:        params.query,
                resultsCount: params.resultsCount,
                sessionId:    params.sessionId,
            }

            await this.baseClient.callTypedAPI(`/analytics/search`, {headers, method: "POST", body: JSON.stringify(body)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    bulkOptimizeContent as api_automation_ai_content_optimizer_bulkOptimizeContent,
    identifyOptimizationTargets as api_automation_ai_content_optimizer_identifyOptimizationTargets,
    optimizeArticleContent as api_automation_ai_content_optimizer_optimizeArticleContent
} from "~backend/automation/ai_content_optimizer";
import {
    searchAmazonProducts as api_automation_amazon_product_sync_searchAmazonProducts,
    syncAmazonProducts as api_automation_amazon_product_sync_syncAmazonProducts
} from "~backend/automation/amazon_product_sync";
import {
    generateWeeklyReport as api_automation_analytics_reporter_generateWeeklyReport,
    sendWeeklyReport as api_automation_analytics_reporter_sendWeeklyReport
} from "~backend/automation/analytics_reporter";
import { generateContent as api_automation_content_generator_generateContent } from "~backend/automation/content_generator";
import {
    enhanceContentWithProducts as api_automation_content_publishing_pipeline_enhanceContentWithProducts,
    runContentPipeline as api_automation_content_publishing_pipeline_runContentPipeline,
    scheduleContentGeneration as api_automation_content_publishing_pipeline_scheduleContentGeneration
} from "~backend/automation/content_publishing_pipeline";
import {
    getContentSchedule as api_automation_content_scheduler_getContentSchedule,
    processScheduledContent as api_automation_content_scheduler_processScheduledContent,
    scheduleContent as api_automation_content_scheduler_scheduleContent
} from "~backend/automation/content_scheduler";
import { ingestFromSheets as api_automation_ingest_from_sheets_ingestFromSheets } from "~backend/automation/ingest_from_sheets";
import {
    checkAffiliateLinks as api_automation_link_checker_checkAffiliateLinks,
    getLinkHealthReport as api_automation_link_checker_getLinkHealthReport
} from "~backend/automation/link_checker";
import {
    analyzePerformance as api_automation_performance_optimizer_analyzePerformance,
    implementOptimizations as api_automation_performance_optimizer_implementOptimizations
} from "~backend/automation/performance_optimizer";
import {
    analyzeRevenue as api_automation_revenue_optimizer_analyzeRevenue,
    implementRevenueOptimizations as api_automation_revenue_optimizer_implementRevenueOptimizations
} from "~backend/automation/revenue_optimizer";
import {
    createSchedule as api_automation_scheduler_createSchedule,
    getSchedules as api_automation_scheduler_getSchedules,
    runScheduledTasks as api_automation_scheduler_runScheduledTasks
} from "~backend/automation/scheduler";
import {
    bulkTrackKeywords as api_automation_seo_tracker_bulkTrackKeywords,
    discoverKeywordOpportunities as api_automation_seo_tracker_discoverKeywordOpportunities,
    generateSEOReport as api_automation_seo_tracker_generateSEOReport,
    trackKeyword as api_automation_seo_tracker_trackKeyword,
    updateKeywordRankings as api_automation_seo_tracker_updateKeywordRankings
} from "~backend/automation/seo_tracker";
import {
    generateSocialContent as api_automation_social_media_automation_generateSocialContent,
    publishScheduledPosts as api_automation_social_media_automation_publishScheduledPosts
} from "~backend/automation/social_media_automation";
import { testSecrets as api_automation_test_secrets_testSecrets } from "~backend/automation/test_secrets";
import { generateWeeklyDigest as api_automation_weekly_digest_generateWeeklyDigest } from "~backend/automation/weekly_digest";

export namespace automation {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.analyzePerformance = this.analyzePerformance.bind(this)
            this.analyzeRevenue = this.analyzeRevenue.bind(this)
            this.bulkOptimizeContent = this.bulkOptimizeContent.bind(this)
            this.bulkTrackKeywords = this.bulkTrackKeywords.bind(this)
            this.checkAffiliateLinks = this.checkAffiliateLinks.bind(this)
            this.createSchedule = this.createSchedule.bind(this)
            this.discoverKeywordOpportunities = this.discoverKeywordOpportunities.bind(this)
            this.enhanceContentWithProducts = this.enhanceContentWithProducts.bind(this)
            this.generateContent = this.generateContent.bind(this)
            this.generateSEOReport = this.generateSEOReport.bind(this)
            this.generateSocialContent = this.generateSocialContent.bind(this)
            this.generateWeeklyDigest = this.generateWeeklyDigest.bind(this)
            this.generateWeeklyReport = this.generateWeeklyReport.bind(this)
            this.getContentSchedule = this.getContentSchedule.bind(this)
            this.getLinkHealthReport = this.getLinkHealthReport.bind(this)
            this.getSchedules = this.getSchedules.bind(this)
            this.identifyOptimizationTargets = this.identifyOptimizationTargets.bind(this)
            this.implementOptimizations = this.implementOptimizations.bind(this)
            this.implementRevenueOptimizations = this.implementRevenueOptimizations.bind(this)
            this.ingestFromSheets = this.ingestFromSheets.bind(this)
            this.optimizeArticleContent = this.optimizeArticleContent.bind(this)
            this.processScheduledContent = this.processScheduledContent.bind(this)
            this.publishScheduledPosts = this.publishScheduledPosts.bind(this)
            this.runContentPipeline = this.runContentPipeline.bind(this)
            this.runScheduledTasks = this.runScheduledTasks.bind(this)
            this.scheduleContent = this.scheduleContent.bind(this)
            this.scheduleContentGeneration = this.scheduleContentGeneration.bind(this)
            this.searchAmazonProducts = this.searchAmazonProducts.bind(this)
            this.sendWeeklyReport = this.sendWeeklyReport.bind(this)
            this.syncAmazonProducts = this.syncAmazonProducts.bind(this)
            this.testSecrets = this.testSecrets.bind(this)
            this.trackKeyword = this.trackKeyword.bind(this)
            this.updateKeywordRankings = this.updateKeywordRankings.bind(this)
        }

        /**
         * Analyzes performance and generates optimization recommendations.
         */
        public async analyzePerformance(): Promise<ResponseType<typeof api_automation_performance_optimizer_analyzePerformance>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/performance-analysis`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_performance_optimizer_analyzePerformance>
        }

        /**
         * Analyzes affiliate performance and suggests optimizations.
         */
        public async analyzeRevenue(): Promise<ResponseType<typeof api_automation_revenue_optimizer_analyzeRevenue>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/revenue-analysis`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_revenue_optimizer_analyzeRevenue>
        }

        /**
         * Optimizes multiple articles in batch for efficiency.
         */
        public async bulkOptimizeContent(params: RequestType<typeof api_automation_ai_content_optimizer_bulkOptimizeContent>): Promise<ResponseType<typeof api_automation_ai_content_optimizer_bulkOptimizeContent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/bulk-optimize`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_ai_content_optimizer_bulkOptimizeContent>
        }

        /**
         * Tracks multiple keywords in bulk for efficiency.
         */
        public async bulkTrackKeywords(params: RequestType<typeof api_automation_seo_tracker_bulkTrackKeywords>): Promise<ResponseType<typeof api_automation_seo_tracker_bulkTrackKeywords>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/bulk-track-keywords`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_seo_tracker_bulkTrackKeywords>
        }

        /**
         * Checks all affiliate links for availability and performance.
         */
        public async checkAffiliateLinks(): Promise<ResponseType<typeof api_automation_link_checker_checkAffiliateLinks>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/check-links`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_link_checker_checkAffiliateLinks>
        }

        /**
         * Creates or updates an automation schedule.
         */
        public async createSchedule(params: RequestType<typeof api_automation_scheduler_createSchedule>): Promise<ResponseType<typeof api_automation_scheduler_createSchedule>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/schedule`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_scheduler_createSchedule>
        }

        /**
         * Automatically discovers keyword opportunities from existing content.
         */
        public async discoverKeywordOpportunities(): Promise<ResponseType<typeof api_automation_seo_tracker_discoverKeywordOpportunities>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/keyword-opportunities`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_seo_tracker_discoverKeywordOpportunities>
        }

        public async enhanceContentWithProducts(params: RequestType<typeof api_automation_content_publishing_pipeline_enhanceContentWithProducts>): Promise<ResponseType<typeof api_automation_content_publishing_pipeline_enhanceContentWithProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/enhance-content-products`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_publishing_pipeline_enhanceContentWithProducts>
        }

        /**
         * Generates SEO-optimized content with affiliate product integration.
         */
        public async generateContent(params: RequestType<typeof api_automation_content_generator_generateContent>): Promise<ResponseType<typeof api_automation_content_generator_generateContent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/generate-content`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_generator_generateContent>
        }

        /**
         * Generates comprehensive SEO performance report.
         */
        public async generateSEOReport(): Promise<ResponseType<typeof api_automation_seo_tracker_generateSEOReport>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/seo-report`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_seo_tracker_generateSEOReport>
        }

        /**
         * Generates social media content from published articles.
         */
        public async generateSocialContent(params: RequestType<typeof api_automation_social_media_automation_generateSocialContent>): Promise<ResponseType<typeof api_automation_social_media_automation_generateSocialContent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/generate-social`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_social_media_automation_generateSocialContent>
        }

        /**
         * Generates and sends weekly performance digest.
         */
        public async generateWeeklyDigest(): Promise<ResponseType<typeof api_automation_weekly_digest_generateWeeklyDigest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/weekly-digest`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_weekly_digest_generateWeeklyDigest>
        }

        /**
         * Generates comprehensive weekly performance report.
         */
        public async generateWeeklyReport(): Promise<ResponseType<typeof api_automation_analytics_reporter_generateWeeklyReport>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/weekly-report`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_analytics_reporter_generateWeeklyReport>
        }

        /**
         * Retrieves the content publishing schedule with revenue projections.
         */
        public async getContentSchedule(): Promise<ResponseType<typeof api_automation_content_scheduler_getContentSchedule>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/content-schedule`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_scheduler_getContentSchedule>
        }

        /**
         * Gets detailed health report for admin dashboard.
         */
        public async getLinkHealthReport(): Promise<ResponseType<typeof api_automation_link_checker_getLinkHealthReport>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/link-health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_link_checker_getLinkHealthReport>
        }

        /**
         * Gets all automation schedules for admin dashboard.
         */
        public async getSchedules(): Promise<ResponseType<typeof api_automation_scheduler_getSchedules>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/schedules`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_scheduler_getSchedules>
        }

        /**
         * Analyzes content performance and suggests optimization targets.
         */
        public async identifyOptimizationTargets(): Promise<ResponseType<typeof api_automation_ai_content_optimizer_identifyOptimizationTargets>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/optimization-targets`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_ai_content_optimizer_identifyOptimizationTargets>
        }

        /**
         * Automatically implements selected optimizations.
         */
        public async implementOptimizations(params: RequestType<typeof api_automation_performance_optimizer_implementOptimizations>): Promise<ResponseType<typeof api_automation_performance_optimizer_implementOptimizations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/implement-optimizations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_performance_optimizer_implementOptimizations>
        }

        /**
         * Automatically implements revenue optimization actions.
         */
        public async implementRevenueOptimizations(params: RequestType<typeof api_automation_revenue_optimizer_implementRevenueOptimizations>): Promise<ResponseType<typeof api_automation_revenue_optimizer_implementRevenueOptimizations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/implement-revenue-optimizations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_revenue_optimizer_implementRevenueOptimizations>
        }

        /**
         * Ingests content ideas from Google Sheets and enqueues them for processing.
         */
        public async ingestFromSheets(params: RequestType<typeof api_automation_ingest_from_sheets_ingestFromSheets>): Promise<ResponseType<typeof api_automation_ingest_from_sheets_ingestFromSheets>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/ingest/sheets`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_ingest_from_sheets_ingestFromSheets>
        }

        /**
         * Optimizes individual article content using AI.
         */
        public async optimizeArticleContent(params: RequestType<typeof api_automation_ai_content_optimizer_optimizeArticleContent>): Promise<ResponseType<typeof api_automation_ai_content_optimizer_optimizeArticleContent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/optimize-content`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_ai_content_optimizer_optimizeArticleContent>
        }

        /**
         * Processes scheduled content for publication.
         */
        public async processScheduledContent(): Promise<ResponseType<typeof api_automation_content_scheduler_processScheduledContent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/process-scheduled`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_scheduler_processScheduledContent>
        }

        /**
         * Publishes scheduled social media posts.
         */
        public async publishScheduledPosts(): Promise<ResponseType<typeof api_automation_social_media_automation_publishScheduledPosts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/publish-social`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_social_media_automation_publishScheduledPosts>
        }

        public async runContentPipeline(params: RequestType<typeof api_automation_content_publishing_pipeline_runContentPipeline>): Promise<ResponseType<typeof api_automation_content_publishing_pipeline_runContentPipeline>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/content-pipeline`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_publishing_pipeline_runContentPipeline>
        }

        /**
         * Runs pending scheduled tasks.
         */
        public async runScheduledTasks(): Promise<ResponseType<typeof api_automation_scheduler_runScheduledTasks>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/run-tasks`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_scheduler_runScheduledTasks>
        }

        /**
         * Schedules content generation and publishing with revenue optimization.
         */
        public async scheduleContent(params: RequestType<typeof api_automation_content_scheduler_scheduleContent>): Promise<ResponseType<typeof api_automation_content_scheduler_scheduleContent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/schedule-content`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_scheduler_scheduleContent>
        }

        public async scheduleContentGeneration(params: RequestType<typeof api_automation_content_publishing_pipeline_scheduleContentGeneration>): Promise<ResponseType<typeof api_automation_content_publishing_pipeline_scheduleContentGeneration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/schedule-content-generation`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_content_publishing_pipeline_scheduleContentGeneration>
        }

        public async searchAmazonProducts(params: RequestType<typeof api_automation_amazon_product_sync_searchAmazonProducts>): Promise<ResponseType<typeof api_automation_amazon_product_sync_searchAmazonProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/amazon/search`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_amazon_product_sync_searchAmazonProducts>
        }

        /**
         * Sends automated email report (placeholder for email integration).
         */
        public async sendWeeklyReport(params: RequestType<typeof api_automation_analytics_reporter_sendWeeklyReport>): Promise<ResponseType<typeof api_automation_analytics_reporter_sendWeeklyReport>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/send-report`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_analytics_reporter_sendWeeklyReport>
        }

        public async syncAmazonProducts(params: RequestType<typeof api_automation_amazon_product_sync_syncAmazonProducts>): Promise<ResponseType<typeof api_automation_amazon_product_sync_syncAmazonProducts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/amazon/sync`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_amazon_product_sync_syncAmazonProducts>
        }

        public async testSecrets(): Promise<ResponseType<typeof api_automation_test_secrets_testSecrets>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/test-secrets`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_test_secrets_testSecrets>
        }

        /**
         * Tracks SEO performance for specific keywords.
         */
        public async trackKeyword(params: RequestType<typeof api_automation_seo_tracker_trackKeyword>): Promise<ResponseType<typeof api_automation_seo_tracker_trackKeyword>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/track-keyword`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_seo_tracker_trackKeyword>
        }

        /**
         * Updates keyword rankings (would integrate with SEO tools in production).
         */
        public async updateKeywordRankings(): Promise<ResponseType<typeof api_automation_seo_tracker_updateKeywordRankings>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automation/update-rankings`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_automation_seo_tracker_updateKeywordRankings>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createArticle as api_content_create_article_createArticle } from "~backend/content/create_article";
import { createCategory as api_content_create_category_createCategory } from "~backend/content/create_category";
import { createTag as api_content_create_tag_createTag } from "~backend/content/create_tag";
import { deleteArticle as api_content_delete_article_deleteArticle } from "~backend/content/delete_article";
import { getArticle as api_content_get_article_getArticle } from "~backend/content/get_article";
import { getPopularArticles as api_content_get_popular_articles_getPopularArticles } from "~backend/content/get_popular_articles";
import { getRelatedArticles as api_content_get_related_articles_getRelatedArticles } from "~backend/content/get_related_articles";
import { listArticles as api_content_list_articles_listArticles } from "~backend/content/list_articles";
import { listCategories as api_content_list_categories_listCategories } from "~backend/content/list_categories";
import { listTags as api_content_list_tags_listTags } from "~backend/content/list_tags";
import { publishArticleToMedium as api_content_publish_to_medium_publishArticleToMedium } from "~backend/content/publish_to_medium";
import { publishToWordPress as api_content_publish_to_wordpress_publishToWordPress } from "~backend/content/publish_to_wordpress";
import { searchArticles as api_content_search_articles_searchArticles } from "~backend/content/search_articles";
import { updateArticle as api_content_update_article_updateArticle } from "~backend/content/update_article";

export namespace content {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createArticle = this.createArticle.bind(this)
            this.createCategory = this.createCategory.bind(this)
            this.createTag = this.createTag.bind(this)
            this.deleteArticle = this.deleteArticle.bind(this)
            this.getArticle = this.getArticle.bind(this)
            this.getPopularArticles = this.getPopularArticles.bind(this)
            this.getRelatedArticles = this.getRelatedArticles.bind(this)
            this.listArticles = this.listArticles.bind(this)
            this.listCategories = this.listCategories.bind(this)
            this.listTags = this.listTags.bind(this)
            this.publishArticleToMedium = this.publishArticleToMedium.bind(this)
            this.publishToWordPress = this.publishToWordPress.bind(this)
            this.searchArticles = this.searchArticles.bind(this)
            this.updateArticle = this.updateArticle.bind(this)
        }

        /**
         * Creates a new article.
         */
        public async createArticle(params: RequestType<typeof api_content_create_article_createArticle>): Promise<ResponseType<typeof api_content_create_article_createArticle>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_create_article_createArticle>
        }

        /**
         * Creates a new category.
         */
        public async createCategory(params: RequestType<typeof api_content_create_category_createCategory>): Promise<ResponseType<typeof api_content_create_category_createCategory>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/categories`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_create_category_createCategory>
        }

        /**
         * Creates a new tag.
         */
        public async createTag(params: RequestType<typeof api_content_create_tag_createTag>): Promise<ResponseType<typeof api_content_create_tag_createTag>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tags`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_create_tag_createTag>
        }

        /**
         * Deletes an article.
         */
        public async deleteArticle(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/articles/by-id/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves a single article by slug and increments view count.
         */
        public async getArticle(params: { slug: string }): Promise<ResponseType<typeof api_content_get_article_getArticle>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles/by-slug/${encodeURIComponent(params.slug)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_get_article_getArticle>
        }

        /**
         * Retrieves the most popular articles based on view count within a specified time period.
         */
        public async getPopularArticles(params: RequestType<typeof api_content_get_popular_articles_getPopularArticles>): Promise<ResponseType<typeof api_content_get_popular_articles_getPopularArticles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                days:  params.days === undefined ? undefined : String(params.days),
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles/popular`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_get_popular_articles_getPopularArticles>
        }

        /**
         * Retrieves articles related to the given article based on category and tags.
         */
        public async getRelatedArticles(params: RequestType<typeof api_content_get_related_articles_getRelatedArticles>): Promise<ResponseType<typeof api_content_get_related_articles_getRelatedArticles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles/by-slug/${encodeURIComponent(params.slug)}/related`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_get_related_articles_getRelatedArticles>
        }

        /**
         * Retrieves all articles with optional filtering and pagination.
         */
        public async listArticles(params: RequestType<typeof api_content_list_articles_listArticles>): Promise<ResponseType<typeof api_content_list_articles_listArticles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryId: params.categoryId === undefined ? undefined : String(params.categoryId),
                featured:   params.featured === undefined ? undefined : String(params.featured),
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
                published:  params.published === undefined ? undefined : String(params.published),
                search:     params.search,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_list_articles_listArticles>
        }

        /**
         * Retrieves all categories.
         */
        public async listCategories(): Promise<ResponseType<typeof api_content_list_categories_listCategories>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/categories`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_list_categories_listCategories>
        }

        /**
         * Retrieves all tags.
         */
        public async listTags(): Promise<ResponseType<typeof api_content_list_tags_listTags>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tags`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_list_tags_listTags>
        }

        /**
         * Publishes an article to Medium.
         */
        public async publishArticleToMedium(params: RequestType<typeof api_content_publish_to_medium_publishArticleToMedium>): Promise<ResponseType<typeof api_content_publish_to_medium_publishArticleToMedium>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/content/publish-to-medium`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_publish_to_medium_publishArticleToMedium>
        }

        /**
         * Publishes an article to WordPress.
         */
        public async publishToWordPress(params: RequestType<typeof api_content_publish_to_wordpress_publishToWordPress>): Promise<ResponseType<typeof api_content_publish_to_wordpress_publishToWordPress>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/content/publish-to-wordpress`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_publish_to_wordpress_publishToWordPress>
        }

        /**
         * Searches articles by title, content, and tags with full-text search capabilities.
         */
        public async searchArticles(params: RequestType<typeof api_content_search_articles_searchArticles>): Promise<ResponseType<typeof api_content_search_articles_searchArticles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                categoryId: params.categoryId === undefined ? undefined : String(params.categoryId),
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
                query:      params.query,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles/search`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_search_articles_searchArticles>
        }

        /**
         * Updates an existing article.
         */
        public async updateArticle(params: RequestType<typeof api_content_update_article_updateArticle>): Promise<ResponseType<typeof api_content_update_article_updateArticle>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                affiliateBlocks:  params.affiliateBlocks,
                categoryId:       params.categoryId,
                content:          params.content,
                excerpt:          params.excerpt,
                featured:         params.featured,
                featuredImageUrl: params.featuredImageUrl,
                mediumPostId:     params.mediumPostId,
                published:        params.published,
                seoMeta:          params.seoMeta,
                tagIds:           params.tagIds,
                title:            params.title,
                wpPostId:         params.wpPostId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/articles/by-id/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_content_update_article_updateArticle>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { subscribe as api_newsletter_subscribe_subscribe } from "~backend/newsletter/subscribe";

export namespace newsletter {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.subscribe = this.subscribe.bind(this)
        }

        /**
         * Subscribes a user to the newsletter.
         */
        public async subscribe(params: RequestType<typeof api_newsletter_subscribe_subscribe>): Promise<ResponseType<typeof api_newsletter_subscribe_subscribe>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/subscribe`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_newsletter_subscribe_subscribe>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { healthCheck as api_seo_health_check_healthCheck } from "~backend/seo/health_check";
import { generateRobots as api_seo_robots_generateRobots } from "~backend/seo/robots";
import { generateSitemap as api_seo_sitemap_generateSitemap } from "~backend/seo/sitemap";

export namespace seo {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.generateRobots = this.generateRobots.bind(this)
            this.generateSitemap = this.generateSitemap.bind(this)
            this.healthCheck = this.healthCheck.bind(this)
        }

        /**
         * Generates robots.txt for search engine crawling guidelines.
         */
        public async generateRobots(): Promise<ResponseType<typeof api_seo_robots_generateRobots>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/robots.txt`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_seo_robots_generateRobots>
        }

        /**
         * Generates XML sitemap for SEO optimization.
         */
        public async generateSitemap(): Promise<ResponseType<typeof api_seo_sitemap_generateSitemap>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/sitemap.xml`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_seo_sitemap_generateSitemap>
        }

        /**
         * Health check endpoint for monitoring and deployment verification.
         */
        public async healthCheck(): Promise<ResponseType<typeof api_seo_health_check_healthCheck>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/healthz`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_seo_health_check_healthCheck>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.0)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
